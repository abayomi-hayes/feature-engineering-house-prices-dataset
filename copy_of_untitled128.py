# -*- coding: utf-8 -*-
"""Copy of Untitled128.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WiYn4iuaFeOAeLU4e-JC6aOERcyMBnfq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
pd.pandas.set_option("display.max_columns",None)

house_df = pd.read_csv("train (1).csv")
house_df

print(house_df.shape)

house_df.head()

"""missing values

all the numerical  values

distribution of the numerical values

cardbality of categorical values

outliers

relationship between independent and dependent values

"""

features_with_na = [features for features in house_df.columns if house_df[features].isnull().sum()>1]

for feature in features_with_na:
  print(feature,np.round(house_df[feature].isnull().mean(),4), "is a missing value")

for feature in features_with_na:
  data = house_df.copy()
  data[feature] = np.where(data[feature].isnull(), 1, 0)
  data.groupby(feature)['Sold Price'].median().plot.bar()
  plt.title(feature)
  plt.show()

house_df

house_df = house_df.rename(columns={'Listed On': 'year_on', 'Last Sold On': 'Year_sold_on','Year built':'year built'})

house_df

house_df['Year_sold_on']=house_df['Year_sold_on'].str.replace("-","")

house_df

house_df['year_on'] = house_df['year_on'].astype(int)

numerical_features = [feature for feature in house_df.columns if house_df[feature].dtypes != 'O']
print('Number of numerical variables: ', len(numerical_features))

house_df[numerical_features].head()

year_feature = [feature for feature in numerical_features if 'Yr' in feature or 'year' in feature]

year_feature

for feature in year_feature:
    print(feature, house_df[feature].unique())

discrete_feature=[feature for feature in numerical_features if len(house_df[feature].unique())<25 and feature not in year_feature+['Id']]
print("Discrete Variables Count: {}".format(len(discrete_feature)))

discrete_feature

for feature in discrete_feature:
  data=house_df.copy()
  data.groupby(feature)['Sold Price'].median().plot.bar()
  plt.xlabel(feature)
  plt.ylabel('SalePrice')
  plt.title(feature)
  plt.show()

continuous_feature=[feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]
print("Continuous feature Count {}".format(len(continuous_feature)))

continuous_feature

for feature in continuous_feature:
    data=house_df.copy()
    data[feature].hist(bins=25)
    plt.xlabel(feature)
    plt.ylabel("Count")
    plt.title(feature)
    plt.show()

for feature in continuous_feature:
    data=house_df.copy()
    if 0 in data[feature].unique():
        pass
    else:
        data[feature]=np.log(data[feature])
        data['Sold Price']=np.log(data['Sold Price'])
        plt.scatter(data[feature],data['Sold Price'])
        plt.xlabel(feature)
        plt.ylabel('SalesPrice')
        plt.title(feature)
        plt.show()

categorical_features=[feature for feature in house_df.columns if data[feature].dtypes=='O']
categorical_features

for feature in categorical_features:
    print('The feature is {} and number of categories are {}'.format(feature,len(house_df[feature].unique())))

features_nan=[feature for feature in house_df.columns if house_df[feature].isnull().sum()>1 and house_df[feature].dtypes=='O']

for feature in features_nan:
    print("{}: {}% missing values".format(feature,np.round(house_df[feature].isnull().mean(),4)))

def replace_data_feature(house_df,features_nan):
    data=house_df.copy()
    data[features_nan]=data[features_nan].fillna('Missing')
    return data

dataset=replace_data_feature(house_df,features_nan)

dataset[features_nan].isnull().sum()

numerical_with_nan=[feature for feature in house_df.columns if house_df[feature].isnull().sum()>1 and house_df[feature].dtypes!='O']
for feature in numerical_with_nan:
    print("{}: {}% missing value".format(feature,np.around(house_df[feature].isnull().mean(),4)))

for feature in numerical_with_nan:
  median_value=house_df[feature].median()
  house_df[feature+'nan']=np.where(house_df[feature].isnull(),1,0)
  house_df[feature].fillna(median_value,inplace=True)
house_df[numerical_with_nan].isnull().sum()

house_df

categorical_features=[feature for feature in house_df.columns if house_df[feature].dtype=='O']

categorical_features

for feature in categorical_features:
    temp=house_df.groupby(feature)['Sold Price'].count()/len(house_df)
    temp_df=temp[temp>0.01].index
    house_df[feature]=np.where(house_df[feature].isin(temp_df),house_df[feature],'Rare_var')

house_df

for feature in categorical_features:
    labels_ordered=house_df.groupby([feature])['Sold Price'].mean().sort_values().index
    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}
    house_df[feature]=house_df[feature].map(labels_ordered)

house_df

scaling_feature=[feature for feature in dataset.columns if feature not in ['Id','Sold Price','Year_sold_on','year_on'] ]
len(scaling_feature)

feature_scale=[feature for feature in dataset.columns if feature not in ['Id','Sold Price','Year_sold_on','year_on']]

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(house_df[feature_scale])

scaler.transform(house_df[feature_scale])

data = pd.concat([house_df[['Id', 'Sold Price']].reset_index(drop=True),
                    pd.DataFrame(scaler.transform(house_df[feature_scale]), columns=feature_scale)],
                    axis=1)

data = data.drop("year built",axis=1)

data

from sklearn.linear_model import Lasso
from sklearn.feature_selection import SelectFromModel

y_train=data[['Sold Price']]

X_train=data.drop(['Id','Sold Price'],axis=1)

feature_sel_model = SelectFromModel(Lasso(alpha=0.005, random_state=0))
feature_sel_model.fit(X_train, y_train)
feature_sel_model.get_support()

selected_feat = X_train.columns[(feature_sel_model.get_support())]

X_train=X_train[selected_feat]
X_train